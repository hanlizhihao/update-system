<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.thinking.update.main.dao.AppVersionLogDao">
    <!-- AppVersionLog的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_AppVersionLog_Map" type="com.thinking.update.main.entity.AppVersionLog">
        <id column="id" property="id" />
        <result column="app_name" property="appName" />
        <result column="state_name" property="stateName" />
        <result column="target_version_id" property="targetVersionId" />
        <result column="version_id" property="versionId" />
        <result column="state" property="state" />
        <result column="app_id" property="appId" />
        <result column="version" property="version" />
        <result column="target_version" property="targetVersion" />
        <result column="ts" property="ts" />
    </resultMap>

    <!-- 数据库中表名为:t_app_version_log的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="t_app_version_log_Column">
        t_app_version_log.id as id
        ,t_app_version_log.app_name as app_name
        ,t_app_version_log.state_name as state_name
        ,t_app_version_log.target_version_id as target_version_id
        ,t_app_version_log.version_id as version_id
        ,t_app_version_log.state as state
        ,t_app_version_log.app_id as app_id
        ,t_app_version_log.version as version
        ,t_app_version_log.target_version as target_version
        ,t_app_version_log.ts as ts
    </sql>

    <!--获得类名为:AppVersionLog对应的数据库表的数据总行数 -->
    <select id="getAppVersionLogRowCount" resultType="java.lang.Long">
        select count(id) from t_app_version_log
    </select>
    <!-- 获得类名为:AppVersionLog对应数据库中表的数据集合 -->
    <select id="selectAppVersionLog" resultMap="result_AppVersionLog_Map">
        select 
        <include refid="t_app_version_log_Column" /> 
        from t_app_version_log
    </select> 

    <!-- 获得一个AppVersionLog对象,以参数AppVersionLog对象中不为空的属性作为条件进行查询-->
    <select id="selectAppVersionLogByObj" parameterType="com.thinking.update.main.entity.AppVersionLog" resultMap="result_AppVersionLog_Map">
        select 
            <include refid="t_app_version_log_Column" /> 
        from t_app_version_log
        <where>
            <if test="ts != null "> and t_app_version_log.ts = #{ts}</if>
            <if test="targetVersion != null "> and t_app_version_log.target_version = #{targetVersion}</if>
            <if test="version != null "> and t_app_version_log.version = #{version}</if>
            <if test="appId != null "> and t_app_version_log.app_id = #{appId}</if>
            <if test="state != null "> and t_app_version_log.state = #{state}</if>
            <if test="versionId != null "> and t_app_version_log.version_id = #{versionId}</if>
            <if test="targetVersionId != null "> and t_app_version_log.target_version_id = #{targetVersionId}</if>
            <if test="stateName != null "> and t_app_version_log.state_name = #{stateName}</if>
            <if test="appName != null "> and t_app_version_log.app_name = #{appName}</if>
            <if test="id != null "> and t_app_version_log.id = #{id}</if>
        </where>
    </select> 

    <!-- 通过AppVersionLog的id获得对应数据库中表的数据对象-->
    <select id="selectAppVersionLogById" parameterType="java.lang.Long" resultMap="result_AppVersionLog_Map">
        select 
            <include refid="t_app_version_log_Column" /> 
        from t_app_version_log
        where t_app_version_log.id = #{id}
    </select> 

    <!-- 将AppVersionLog插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertAppVersionLog" parameterType="com.thinking.update.main.entity.AppVersionLog">
        insert into t_app_version_log(id,app_name,state_name,target_version_id,version_id,state,app_id,version,target_version,ts) 
        values(#{id},#{appName},#{stateName},#{targetVersionId},#{versionId},#{state},#{appId},#{version},#{targetVersion},#{ts})
    </insert>

    <!-- 将AppVersionLog中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyAppVersionLog" parameterType="com.thinking.update.main.entity.AppVersionLog">
        insert into t_app_version_log
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">id,</if>
            <if test="appName != null">app_name,</if>
            <if test="stateName != null">state_name,</if>
            <if test="targetVersionId != null">target_version_id,</if>
            <if test="versionId != null">version_id,</if>
            <if test="state != null">state,</if>
            <if test="appId != null">app_id,</if>
            <if test="version != null">version,</if>
            <if test="targetVersion != null">target_version,</if>
            <if test="ts != null">ts,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null"> #{id},</if>
            <if test="appName != null"> #{appName},</if>
            <if test="stateName != null"> #{stateName},</if>
            <if test="targetVersionId != null"> #{targetVersionId},</if>
            <if test="versionId != null"> #{versionId},</if>
            <if test="state != null"> #{state},</if>
            <if test="appId != null"> #{appId},</if>
            <if test="version != null"> #{version},</if>
            <if test="targetVersion != null"> #{targetVersion},</if>
            <if test="ts != null"> #{ts},</if>
        </trim>
    </insert>

    <!-- 将AppVersionLog批量插入到对应数据库的表中-->
    <insert id="insertAppVersionLogByBatch" parameterType="java.util.ArrayList">
        insert into t_app_version_log(id,app_name,state_name,target_version_id,version_id,state,app_id,version,target_version,ts) values
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.id},#{item.appName},#{item.stateName},#{item.targetVersionId},#{item.versionId},#{item.state},#{item.appId},#{item.version},#{item.targetVersion},#{item.ts})
        </foreach>
    </insert>

    <!-- 通过AppVersionLog的id将数据库表中对应的数据删除-->
    <delete id="deleteAppVersionLogById" parameterType="java.lang.Long">
        delete from t_app_version_log
        where id = #{id}
    </delete>

    <!-- 通过AppVersionLog的id将AppVersionLog的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updateAppVersionLogById" parameterType="com.thinking.update.main.entity.AppVersionLog">
        update t_app_version_log set
            app_name=#{appName}
            ,state_name=#{stateName}
            ,target_version_id=#{targetVersionId}
            ,version_id=#{versionId}
            ,state=#{state}
            ,app_id=#{appId}
            ,version=#{version}
            ,target_version=#{targetVersion}
            ,ts=#{ts}
        where id=#{id}
    </update>

    <!-- 通过AppVersionLog的id将AppVersionLog中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyAppVersionLogById" parameterType="com.thinking.update.main.entity.AppVersionLog">
        update t_app_version_log
        <set>
            <if test="appName != null">
                app_name=#{appName},
            </if>
            <if test="stateName != null">
                state_name=#{stateName},
            </if>
            <if test="targetVersionId != null">
                target_version_id=#{targetVersionId},
            </if>
            <if test="versionId != null">
                version_id=#{versionId},
            </if>
            <if test="state != null">
                state=#{state},
            </if>
            <if test="appId != null">
                app_id=#{appId},
            </if>
            <if test="version != null">
                version=#{version},
            </if>
            <if test="targetVersion != null">
                target_version=#{targetVersion},
            </if>
            <if test="ts != null">
                ts=#{ts},
            </if>
        </set>
        where id=#{id}
    </update>

</mapper>