<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.thinking.update.main.dao.AppStateLogDao">
    <!-- AppStateLog的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_AppStateLog_Map" type="com.thinking.update.main.domain.entity.AppStateLog">
        <id column="id" property="id" />
        <result column="app_name" property="appName" />
        <result column="last_state" property="lastState" />
        <result column="version_name" property="versionName" />
        <result column="log" property="log" />
        <result column="current_state" property="currentState" />
        <result column="version_id" property="versionId" />
        <result column="protocol_id" property="protocolId" />
        <result column="app_id" property="appId" />
        <result column="protocol_name" property="protocolName" />
        <result column="ts" property="ts" />
    </resultMap>

    <!-- 数据库中表名为:app_state_log的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="app_state_log_Column">
        app_state_log.id as id
        ,app_state_log.app_name as app_name
        ,app_state_log.last_state as last_state
        ,app_state_log.version_name as version_name
        ,app_state_log.log as log
        ,app_state_log.current_state as current_state
        ,app_state_log.version_id as version_id
        ,app_state_log.protocol_id as protocol_id
        ,app_state_log.app_id as app_id
        ,app_state_log.protocol_name as protocol_name
        ,app_state_log.ts as ts
    </sql>

    <!--获得类名为:AppStateLog对应的数据库表的数据总行数 -->
    <select id="getAppStateLogRowCount" resultType="java.lang.Long">
        select count(id) from app_state_log
    </select>
    <!-- 获得类名为:AppStateLog对应数据库中表的数据集合 -->
    <select id="selectAppStateLog" resultMap="result_AppStateLog_Map">
        select 
        <include refid="app_state_log_Column" /> 
        from app_state_log
    </select>

    <select id="selectLatestLastStateIsNormalLogByAppId" resultMap="result_AppStateLog_Map" parameterType="java.lang.Long">
        select
       id, app_name, last_state, version_name, log, current_state, version_id, protocol_id,
        distinct app_id,protocol_name, ts
        from app_state_log
        where app_state_log.app_id=#{appId} and app_state_log.current_state='1' and app_state_log.last_state='0'
        app_state order by ts desc
    </select>
    <select id="selectNormalStateLogByAppId" resultMap="result_AppStateLog_Map" parameterType="java.lang.Long">
        select
            id, app_name, last_state, version_name, log, current_state, version_id, protocol_id, distinct app_id,
        protocol_name, ts
        from app_state_log
        where app_state_log.app_id=#{appId} and app_state_log.current_state='0'
        app_state order by ts desc
    </select>
    <!-- 获得一个AppStateLog对象,以参数AppStateLog对象中不为空的属性作为条件进行查询-->
    <select id="selectAppStateLogByObj" parameterType="com.thinking.update.main.domain.entity.AppStateLog" resultMap="result_AppStateLog_Map">
        select
        id, app_name, last_state, version_name, log, current_state, version_id, protocol_id,
       app_id,protocol_name, ts
        from app_state_log
        <where>
            <if test="ts != null "> and app_state_log.ts = #{ts}</if>
            <if test="protocolName != null "> and app_state_log.protocol_name = #{protocolName}</if>
            <if test="appId != null "> and app_state_log.app_id = #{appId}</if>
            <if test="protocolId != null "> and app_state_log.protocol_id = #{protocolId}</if>
            <if test="versionId != null "> and app_state_log.version_id = #{versionId}</if>
            <if test="currentState != null "> and app_state_log.current_state = #{currentState}</if>
            <if test="log != null "> and app_state_log.log = #{log}</if>
            <if test="versionName != null "> and app_state_log.version_name = #{versionName}</if>
            <if test="lastState != null "> and app_state_log.last_state = #{lastState}</if>
            <if test="appName != null "> and app_state_log.app_name = #{appName}</if>
            <if test="id != null "> and app_state_log.id = #{id}</if>
        </where>
    </select> 

    <!-- 通过AppStateLog的id获得对应数据库中表的数据对象-->
    <select id="selectAppStateLogById" parameterType="java.lang.Long" resultMap="result_AppStateLog_Map">
        select 
            <include refid="app_state_log_Column" /> 
        from app_state_log
        where app_state_log.id = #{id}
    </select> 

    <!-- 将AppStateLog插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertAppStateLog" parameterType="com.thinking.update.main.domain.entity.AppStateLog">
        insert into app_state_log(id,app_name,last_state,version_name,log,current_state,version_id,protocol_id,app_id,protocol_name,ts) 
        values(#{id},#{appName},#{lastState},#{versionName},#{log},#{currentState},#{versionId},#{protocolId},#{appId},#{protocolName},#{ts})
    </insert>

    <!-- 将AppStateLog中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyAppStateLog" parameterType="com.thinking.update.main.domain.entity.AppStateLog">
        insert into app_state_log
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">id,</if>
            <if test="appName != null">app_name,</if>
            <if test="lastState != null">last_state,</if>
            <if test="versionName != null">version_name,</if>
            <if test="log != null">log,</if>
            <if test="currentState != null">current_state,</if>
            <if test="versionId != null">version_id,</if>
            <if test="protocolId != null">protocol_id,</if>
            <if test="appId != null">app_id,</if>
            <if test="protocolName != null">protocol_name,</if>
            <if test="ts != null">ts,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null"> #{id},</if>
            <if test="appName != null"> #{appName},</if>
            <if test="lastState != null"> #{lastState},</if>
            <if test="versionName != null"> #{versionName},</if>
            <if test="log != null"> #{log},</if>
            <if test="currentState != null"> #{currentState},</if>
            <if test="versionId != null"> #{versionId},</if>
            <if test="protocolId != null"> #{protocolId},</if>
            <if test="appId != null"> #{appId},</if>
            <if test="protocolName != null"> #{protocolName},</if>
            <if test="ts != null"> #{ts},</if>
        </trim>
    </insert>

    <!-- 将AppStateLog批量插入到对应数据库的表中-->
    <insert id="insertAppStateLogByBatch" parameterType="ArrayList">
        insert into app_state_log(id,app_name,last_state,version_name,log,current_state,version_id,protocol_id,app_id,protocol_name,ts) values
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.id},#{item.appName},#{item.lastState},#{item.versionName},#{item.log},#{item.currentState},#{item.versionId},#{item.protocolId},#{item.appId},#{item.protocolName},#{item.ts})
        </foreach>
    </insert>

    <!-- 通过AppStateLog的id将数据库表中对应的数据删除-->
    <delete id="deleteAppStateLogById" parameterType="java.lang.Long">
        delete from app_state_log
        where id = #{id}
    </delete>

    <!-- 通过AppStateLog的id将AppStateLog的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updateAppStateLogById" parameterType="com.thinking.update.main.domain.entity.AppStateLog">
        update app_state_log set
            app_name=#{appName}
            ,last_state=#{lastState}
            ,version_name=#{versionName}
            ,log=#{log}
            ,current_state=#{currentState}
            ,version_id=#{versionId}
            ,protocol_id=#{protocolId}
            ,app_id=#{appId}
            ,protocol_name=#{protocolName}
            ,ts=#{ts}
        where id=#{id}
    </update>

    <!-- 通过AppStateLog的id将AppStateLog中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyAppStateLogById" parameterType="com.thinking.update.main.domain.entity.AppStateLog">
        update app_state_log
        <set>
            <if test="appName != null">
                app_name=#{appName},
            </if>
            <if test="lastState != null">
                last_state=#{lastState},
            </if>
            <if test="versionName != null">
                version_name=#{versionName},
            </if>
            <if test="log != null">
                log=#{log},
            </if>
            <if test="currentState != null">
                current_state=#{currentState},
            </if>
            <if test="versionId != null">
                version_id=#{versionId},
            </if>
            <if test="protocolId != null">
                protocol_id=#{protocolId},
            </if>
            <if test="appId != null">
                app_id=#{appId},
            </if>
            <if test="protocolName != null">
                protocol_name=#{protocolName},
            </if>
            <if test="ts != null">
                ts=#{ts},
            </if>
        </set>
        where id=#{id}
    </update>

</mapper>